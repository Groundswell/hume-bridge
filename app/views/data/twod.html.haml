

%html
	%head
		:css
			body {
				padding: 0;
				margin: 0;
			}
			#myCanvas {
				width: 100vw;
				height: 100vh;
			}

		= javascript_include_tag 'http://paperjs.org/assets/js/paper.js'
		= javascript_include_tag 'https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js'

		:javascript
			$(function(){

				var dims = [ '#{(params[:dims]||'x,y').split(',').first}', '#{(params[:dims]||'x,y').split(',').last}' ]
				var other_dim = '#{([ 'x','y','z' ] - [ (params[:dims]||'x,y').split(',').first,(params[:dims]||'x,y').split(',').last ]).first}'
				var dim_left = dims[0]
				var dim_bottom = dims[1]


				// Get a reference to the canvas object
				var canvas = document.getElementById('myCanvas');
				// Create an empty project and a view for the canvas:
				paper.setup(canvas);
				// Setup directly from canvas id:
				var acceleration_path = new paper.Path();
				acceleration_path.strokeColor = 'black';

				var sum_acceleration_path = new paper.Path();
				sum_acceleration_path.strokeColor = 'red';

				var velocity_path = new paper.Path();
				velocity_path.strokeColor = 'blue';

				var acceleration_last_point = new paper.Point(paper.view.size.width / 3, paper.view.size.height / 2);
				var sum_acceleration_last_point = new paper.Point(paper.view.size.width / 3 * 2, paper.view.size.height / 2);
				var velocity_last_point = new paper.Point(paper.view.size.width / 2, paper.view.size.height / 2);

				acceleration_path.moveTo(acceleration_last_point);
				sum_acceleration_path.moveTo(sum_acceleration_last_point);
				velocity_path.moveTo(velocity_last_point);

				paper.view.draw();
				// console.log(paper,acceleration_path,sum_acceleration_path,velocity_path)


				function render_row( data_point ) {

					table_row = $('<tr></tr>')
					table_row.append('<td>last_acceleration</td>')
					table_row.append('<td>'+data_point.last_data_point['acceleration_'+dim_left+'axis']+'</td>')
					table_row.append('<td>'+data_point.last_data_point['acceleration_'+dim_bottom+'axis']+'</td>')
					table_row.append('<td>this_acceleration</td>')
					table_row.append('<td>'+data_point['acceleration_'+dim_left+'axis']+'</td>')
					table_row.append('<td>'+data_point['acceleration_'+dim_bottom+'axis']+'</td>')
					table_row.append('<td>delta_acceleration</td>')
					table_row.append('<td>'+data_point['delta_acceleration_'+dim_left+'axis']+'</td>')
					table_row.append('<td>'+data_point['delta_acceleration_'+dim_bottom+'axis']+'</td>')
					table_row.append('<td>angles</td>')
					table_row.append('<td>'+data_point.angle_xaxis+'</td>')
					table_row.append('<td>'+data_point.angle_yaxis+'</td>')
					table_row.append('<td>'+data_point.angle_zaxis+'</td>')

					$('.table').append( table_row )

				}

				function draw_data_point( data_point, delay ) {

					setTimeout(function(){
						acceleration_last_point = acceleration_last_point.add([ data_point['delta_acceleration_'+dim_left+'axis'] * 100, data_point['delta_acceleration_'+dim_bottom+'axis'] * 100 ])
						acceleration_path.lineTo(acceleration_last_point);

						sum_acceleration_last_point = sum_acceleration_last_point.add([ data_point['sum_delta_acceleration_'+dim_left+'axis'] * 100, data_point['sum_delta_acceleration_'+dim_bottom+'axis'] * 100 ])
						sum_acceleration_path.lineTo(sum_acceleration_last_point);

						velocity_last_point = velocity_last_point.add([ data_point['sum_delta_acceleration_'+dim_left+'axis'] * data_point.time_delta * 1000, data_point['sum_delta_acceleration_'+dim_bottom+'axis'] * data_point.time_delta * 1000 ])
						velocity_path.lineTo(velocity_last_point);
					}, delay )
				}

				function render_data() {
					$('.positive_quadrant').html('')

					var per_second = 8
					var seconds_per = 1 / per_second

					var last_data_point = null;
					$.getJSON( "#{raw data_path( params.permit( :dims, :limit ).merge( format: :json, tags: params[:tags] ) )}", function( data ) {
						console.log(data)
						$(data).each(function(index,data_point){

							data_point.last_data_point = ( last_data_point || data_point )

							// if ( !data_point.velocity_xaxis ) data_point.velocity_xaxis = (data_point.sum_delta_acceleration_xaxis - (data_point.delta_acceleration_xaxis / 2)) * data_point.time_delta
							// if ( !data_point.velocity_yaxis ) data_point.velocity_yaxis = (data_point.sum_delta_acceleration_yaxis - (data_point.delta_acceleration_yaxis / 2)) * data_point.time_delta
							// if ( !data_point.velocity_zaxis ) data_point.velocity_zaxis = (data_point.sum_delta_acceleration_zaxis - (data_point.delta_acceleration_zaxis / 2)) * data_point.time_delta

							// if ( !data_point.delta_velocity_xaxis ) data_point.delta_velocity_xaxis = data_point.velocity_xaxis - data_point.last_data_point.velocity_xaxis
							// if ( !data_point.delta_velocity_yaxis ) data_point.delta_velocity_yaxis = data_point.velocity_yaxis - data_point.last_data_point.velocity_yaxis
							// if ( !data_point.delta_velocity_zaxis ) data_point.delta_velocity_zaxis = data_point.velocity_zaxis - data_point.last_data_point.velocity_zaxis

							// if ( !data_point.distance_xaxis ) data_point.distance_xaxis = ( data_point.velocity_xaxis - ( data_point.delta_velocity_xaxis / 2 ) ) * data_point.time_delta
							// if ( !data_point.distance_yaxis ) data_point.distance_yaxis = ( data_point.velocity_yaxis - ( data_point.delta_velocity_yaxis / 2 ) ) * data_point.time_delta
							// if ( !data_point.distance_zaxis ) data_point.distance_zaxis = ( data_point.velocity_zaxis - ( data_point.delta_velocity_zaxis / 2 ) ) * data_point.time_delta


							draw_data_point( data_point, (index * seconds_per * 1000) );
							render_row( data_point )

							last_data_point = data_point

					})
				});
			}
			render_data();
			})
	%body
		%canvas#myCanvas{ resize: true }
		%table.table
