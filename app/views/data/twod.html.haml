

%html
	%head
		:css
			body {
				padding: 0;
				margin: 0;
			}
			#myCanvas {
				width: 100vw;
				height: 100vh;
			}
			.grid {
				background: #eaeaea;
				position: relative;
				width: 100vw;
				height: 100vh;
				margin-bottom: 1em;
			}
			.positive_quadrant {
				position: absolute;
				top: 0;
				left: 50vw;
				height: 50vh;
				width: 50vw;
				background: #eeeeee;
			}
			.circle {
				border-radius: 50%;
				background: black;
				width: 2px;
				height: 2px;
				position: absolute;
			}
		= javascript_include_tag 'http://paperjs.org/assets/js/paper.js'
		= javascript_include_tag 'https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js'

		:javascript
			$(function(){

				// Get a reference to the canvas object
				var canvas = document.getElementById('myCanvas');
				// Create an empty project and a view for the canvas:
				paper.setup(canvas);
				// Setup directly from canvas id:
				var path = new paper.Path();
				path.strokeColor = 'black';
				var start = new paper.Point(paper.view.size.width / 2, paper.view.size.height / 2);
				var last_point = start;
				path.moveTo(start);
				paper.view.draw();
				console.log(paper,path)

				function color_from_integer( i ) {

					var r = 0
					var g = 0
					var b = 0

					if( i < 256 ) {
						r = i
					} else if( i < 512 ) {
						r = 255
						g = (i - 255)
					} else if( i < 768 ) {
						r = 255 - (i - 511)
						g = 255
					} else if( i < 1024 ) {
						g = 255
						b = (i - 768)
					} else if( i < 1280 ) {
						g = 255 - (i - 1023)
						b = 255
					} else if( i < 1536 ) {
						b = 255
						r = (i - 1280)
					} else if( i < 1792 ) {
						b = 255 - (i - 1535)
						r = 255
					}


					return [r,g,b]
				}

				function render_data_point( data_point, left, bottom, delay, color ) {
					setTimeout(function(){
						$('.positive_quadrant').append('<div class="circle" style="left:'+left+'px;bottom:'+bottom+'px;background:'+color+'"></div>')
						if ( $('.positive_quadrant>.circle').length > 20 )
							$('.positive_quadrant>.circle').first().remove();
					}, delay )
				}

				function draw_data_point( data_point, delay, color ) {
					setTimeout(function(){
						last_point = last_point.add([ data_point.left_acceleration, data_point.bottom_acceleration ])
						path.lineTo(last_point);
					}, delay )
				}

				function render_data() {
					$('.positive_quadrant').html('')
					var dims = [ 'acceleration_#{(params[:dims]||'x,y').split(',').first}axis', 'acceleration_#{(params[:dims]||'x,y').split(',').last}axis' ]

					var per_second = 8
					var seconds_per = 1 / per_second

					var left_acceleration = 0;
					var bottom_acceleration = 0;

					var left_velocity = 0
					var bottom_velocity = 0

					var left_position = 0;
					var bottom_position = 0;

					var last_data_point = null;
					$.getJSON( "#{raw data_path( params.permit( :dims, :limit ).merge( format: :json, tags: params[:tags] ) )}", function( data ) {
						console.log(data)
						$(data).each(function(index,data_point){

							var last_left_acceleration    = ( last_data_point || data_point )[ dims[0] ] * 100
							var last_bottom_acceleration  = ( last_data_point || data_point )[ dims[1] ] * 100
							var this_left_acceleration    = data_point[ dims[0] ] * 100
							var this_bottom_acceleration  = data_point[ dims[1] ] * 100

							var delta_left_acceleration   =  ( this_left_acceleration - last_left_acceleration )
							var delta_bottom_acceleration = ( this_bottom_acceleration - last_bottom_acceleration )

							data_point.last_data_point = ( last_data_point || data_point )
							data_point.delta_left_acceleration = delta_left_acceleration
							data_point.delta_bottom_acceleration = delta_bottom_acceleration

							left_acceleration	+= Math.round( delta_left_acceleration )
							bottom_acceleration	+= Math.round( delta_bottom_acceleration )

							data_point.left_acceleration = left_acceleration
							data_point.bottom_acceleration = bottom_acceleration

							left_velocity	+= left_acceleration * seconds_per
							bottom_velocity	+= bottom_acceleration * seconds_per
							left_position	+= left_velocity * seconds_per
							bottom_position	+= bottom_velocity * seconds_per

							left_position   = left_acceleration
							bottom_position = bottom_acceleration

							table_row = $('<tr></tr>')
							table_row.append('<td>last_acceleration</td>')
							table_row.append('<td>'+last_left_acceleration+'</td>')
							table_row.append('<td>'+last_bottom_acceleration+'</td>')
							table_row.append('<td>this_acceleration</td>')
							table_row.append('<td>'+this_left_acceleration+'</td>')
							table_row.append('<td>'+this_bottom_acceleration+'</td>')
							table_row.append('<td>delta_acceleration</td>')
							table_row.append('<td>'+delta_left_acceleration+'</td>')
							table_row.append('<td>'+delta_bottom_acceleration+'</td>')
							table_row.append('<td>sum_acceleration</td>')
							table_row.append('<td>'+left_acceleration+'</td>')
							table_row.append('<td>'+bottom_acceleration+'</td>')
							table_row.append('<td>velocity</td>')
							table_row.append('<td>'+left_velocity+'</td>')
							table_row.append('<td>'+bottom_velocity+'</td>')
							table_row.append('<td>distance</td>')
							table_row.append('<td>'+(left_velocity * seconds_per)+'</td>')
							table_row.append('<td>'+(bottom_velocity * seconds_per)+'</td>')

							$('.table').append( table_row )

							var color = color_from_integer(index)

							// render_data_point( data_point, left_position, bottom_position, (index * seconds_per * 1000), "rgb("+color[0]+","+color[1]+","+color[2]+")" )
							draw_data_point( data_point, (index * seconds_per * 1000), color );

							last_data_point = data_point

					})
				});
			}
			render_data();
			})
	%body
		%canvas#myCanvas{ resize: true }
		-#.grid
			.positive_quadrant
		%table.table
