

%html
	%head
		:css
			body {
				padding: 0;
				margin: 0;
			}
			.grid {
				background: #eaeaea;
				position: relative;
				width: 100vw;
				height: 100vh;
				margin-bottom: 1em;
			}
			.positive_quadrant {
				position: absolute;
				top: 0;
				left: 50vw;
				height: 50vh;
				width: 50vw;
				background: #eeeeee;
			}
			.circle {
				border-radius: 50%;
				background: black;
				width: 2px;
				height: 2px;
				position: absolute;
			}

	%body
		.grid
			.positive_quadrant
		%table.table
		= javascript_include_tag 'https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js'
		:javascript

			function color_from_integer( i ) {

				var r = 0
				var g = 0
				var b = 0

				if( i < 256 ) {
					r = i
				} else if( i < 512 ) {
					r = 255
					g = (i - 255)
				} else if( i < 768 ) {
					r = 255 - (i - 511)
					g = 255
				} else if( i < 1024 ) {
					g = 255
					b = (i - 768)
				} else if( i < 1280 ) {
					g = 255 - (i - 1023)
					b = 255
				} else if( i < 1536 ) {
					b = 255
					r = (i - 1280)
				} else if( i < 1792 ) {
					b = 255 - (i - 1535)
					r = 255
				}


				return "rgb("+r+","+g+","+b+")"
			}

			function render_data_point( data_point, left, bottom, delay, color ) {
				setTimeout(function(){
					$('.positive_quadrant').append('<div class="circle" style="left:'+left+'px;bottom:'+bottom+'px;background:'+color+'"></div>')
					if ( $('.positive_quadrant>.circle').length > 20 )
						$('.positive_quadrant>.circle').first().remove();
				}, delay )
			}

			function render_data() {
				$('.positive_quadrant').html('')
				var dims = [ 'acceleration_#{(params[:dims]||'x,y').split(',').first}axis', 'acceleration_#{(params[:dims]||'x,y').split(',').last}axis' ]

				var per_second = 8
				var seconds_per = 1 / per_second

				var left_acceleration = 0;
				var bottom_acceleration = 0;

				var left_velocity = 0
				var bottom_velocity = 0

				var left_position = 0;
				var bottom_position = 0;

				var last_data_point = null;
				$.getJSON( "#{raw data_path( params.permit( :dims, :limit ).merge( format: :json, tags: params[:tags] ) )}", function( data ) {
					console.log(data)
					$(data).each(function(index,data_point){

						var last_left_acceleration    = Math.round( ( last_data_point || data_point )[ dims[0] ] * 100 ) / 100.0
						var last_bottom_acceleration  = Math.round( ( last_data_point || data_point )[ dims[1] ] * 100 ) / 100.0
						var this_left_acceleration    = Math.round( data_point[ dims[0] ] * 100 ) / 100.0
						var this_bottom_acceleration  = Math.round( data_point[ dims[1] ] * 100 ) / 100.0

						var delta_left_acceleration   = this_left_acceleration - last_left_acceleration
						var delta_bottom_acceleration = this_bottom_acceleration - last_bottom_acceleration

						left_acceleration	+= delta_left_acceleration
						bottom_acceleration	+= delta_bottom_acceleration

						left_velocity	+= left_acceleration * seconds_per
						bottom_velocity	+= bottom_acceleration * seconds_per
						left_position	+= left_velocity * seconds_per * 100
						bottom_position	+= bottom_velocity * seconds_per * 100

						left_position   = left_acceleration * 100
						bottom_position = bottom_acceleration * 100

						table_row = $('<tr></tr>')
						table_row.append('<td>'+last_left_acceleration+'</td>')
						table_row.append('<td>'+last_bottom_acceleration+'</td>')
						table_row.append('<td>'+data_point[ dims[0] ]+'</td>')
						table_row.append('<td>'+data_point[ dims[1] ]+'</td>')
						table_row.append('<td>'+left_acceleration+'</td>')
						table_row.append('<td>'+bottom_acceleration+'</td>')
						table_row.append('<td>'+left_velocity+'</td>')
						table_row.append('<td>'+bottom_velocity+'</td>')
						table_row.append('<td>'+(left_velocity * seconds_per)+'</td>')
						table_row.append('<td>'+(bottom_velocity * seconds_per)+'</td>')

						$('.table').append( table_row )

						render_data_point( data_point, left_position, bottom_position, (index * seconds_per * 1000), color_from_integer(index) )

						last_data_point = data_point

					})
				});
			}
			render_data();
